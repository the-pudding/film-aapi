{
  "version": 3,
  "sources": ["../../svelte-copy/dist/copy.js"],
  "sourcesContent": ["export async function copyText(text) {\n    if ('clipboard' in navigator) {\n        await navigator.clipboard.writeText(text);\n    }\n    else {\n        /**\n         * This is the fallback deprecated way of copying text to the clipboard. Only runs if it can't find the clipboard API.\n         */\n        const element = document.createElement('input');\n        element.type = 'text';\n        element.disabled = true;\n        element.style.setProperty('position', 'fixed');\n        element.style.setProperty('z-index', '-100');\n        element.style.setProperty('pointer-events', 'none');\n        element.style.setProperty('opacity', '0');\n        element.value = text;\n        document.body.appendChild(element);\n        element.click();\n        element.select();\n        document.execCommand('copy');\n        document.body.removeChild(element);\n    }\n}\nexport const copy = (element, params) => {\n    async function handle() {\n        if (text)\n            try {\n                await copyText(text);\n                element.dispatchEvent(new CustomEvent('svelte-copy', { detail: text }));\n            }\n            catch (e) {\n                element.dispatchEvent(new CustomEvent('svelte-copy:error', { detail: e }));\n            }\n    }\n    let events = typeof params == 'string' ? ['click'] : [params.events].flat(1);\n    let text = typeof params == 'string' ? params : params.text;\n    events.forEach((event) => {\n        element.addEventListener(event, handle, true);\n    });\n    return {\n        update: (newParams) => {\n            const newEvents = typeof newParams == 'string'\n                ? ['click']\n                : [newParams.events].flat(1);\n            const newText = typeof newParams == 'string' ? newParams : newParams.text;\n            const addedEvents = newEvents.filter((x) => !events.includes(x));\n            const removedEvents = events.filter((x) => !newEvents.includes(x));\n            addedEvents.forEach((event) => {\n                element.addEventListener(event, handle, true);\n            });\n            removedEvents.forEach((event) => {\n                element.removeEventListener(event, handle, true);\n            });\n            events = newEvents;\n            text = newText;\n        },\n        destroy: () => {\n            events.forEach((event) => {\n                element.removeEventListener(event, handle, true);\n            });\n        },\n    };\n};\n"],
  "mappings": ";;;AAAA,eAAsB,SAAS,MAAM;AACjC,MAAI,eAAe,WAAW;AAC1B,UAAM,UAAU,UAAU,UAAU,IAAI;AAAA,EAC5C,OACK;AAID,UAAM,UAAU,SAAS,cAAc,OAAO;AAC9C,YAAQ,OAAO;AACf,YAAQ,WAAW;AACnB,YAAQ,MAAM,YAAY,YAAY,OAAO;AAC7C,YAAQ,MAAM,YAAY,WAAW,MAAM;AAC3C,YAAQ,MAAM,YAAY,kBAAkB,MAAM;AAClD,YAAQ,MAAM,YAAY,WAAW,GAAG;AACxC,YAAQ,QAAQ;AAChB,aAAS,KAAK,YAAY,OAAO;AACjC,YAAQ,MAAM;AACd,YAAQ,OAAO;AACf,aAAS,YAAY,MAAM;AAC3B,aAAS,KAAK,YAAY,OAAO;AAAA,EACrC;AACJ;AACO,IAAM,OAAO,CAAC,SAAS,WAAW;AACrC,iBAAe,SAAS;AACpB,QAAI;AACA,UAAI;AACA,cAAM,SAAS,IAAI;AACnB,gBAAQ,cAAc,IAAI,YAAY,eAAe,EAAE,QAAQ,KAAK,CAAC,CAAC;AAAA,MAC1E,SACO,GAAG;AACN,gBAAQ,cAAc,IAAI,YAAY,qBAAqB,EAAE,QAAQ,EAAE,CAAC,CAAC;AAAA,MAC7E;AAAA,EACR;AACA,MAAI,SAAS,OAAO,UAAU,WAAW,CAAC,OAAO,IAAI,CAAC,OAAO,MAAM,EAAE,KAAK,CAAC;AAC3E,MAAI,OAAO,OAAO,UAAU,WAAW,SAAS,OAAO;AACvD,SAAO,QAAQ,CAAC,UAAU;AACtB,YAAQ,iBAAiB,OAAO,QAAQ,IAAI;AAAA,EAChD,CAAC;AACD,SAAO;AAAA,IACH,QAAQ,CAAC,cAAc;AACnB,YAAM,YAAY,OAAO,aAAa,WAChC,CAAC,OAAO,IACR,CAAC,UAAU,MAAM,EAAE,KAAK,CAAC;AAC/B,YAAM,UAAU,OAAO,aAAa,WAAW,YAAY,UAAU;AACrE,YAAM,cAAc,UAAU,OAAO,CAAC,MAAM,CAAC,OAAO,SAAS,CAAC,CAAC;AAC/D,YAAM,gBAAgB,OAAO,OAAO,CAAC,MAAM,CAAC,UAAU,SAAS,CAAC,CAAC;AACjE,kBAAY,QAAQ,CAAC,UAAU;AAC3B,gBAAQ,iBAAiB,OAAO,QAAQ,IAAI;AAAA,MAChD,CAAC;AACD,oBAAc,QAAQ,CAAC,UAAU;AAC7B,gBAAQ,oBAAoB,OAAO,QAAQ,IAAI;AAAA,MACnD,CAAC;AACD,eAAS;AACT,aAAO;AAAA,IACX;AAAA,IACA,SAAS,MAAM;AACX,aAAO,QAAQ,CAAC,UAAU;AACtB,gBAAQ,oBAAoB,OAAO,QAAQ,IAAI;AAAA,MACnD,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;",
  "names": []
}
